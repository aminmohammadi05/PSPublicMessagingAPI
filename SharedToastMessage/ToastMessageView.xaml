<Window x:Class="PSPublicMessagingAPI.SharedToastMessage.ToastMessageView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PSPublicMessagingAPI.SharedToastMessage"
        Title="NotificationWindow" Height="70" Width="300" ShowInTaskbar="False"
        WindowStyle="None" AllowsTransparency="True" 
        xmlns:toasttype="clr-namespace:PSPublicMessagingAPI.SharedToastMessage.Models"
        mc:Ignorable="d"
        Background="Transparent"
        xmlns:fa="http://schemas.fontawesome.io/icons/"
        SizeToContent="Height"
        >
    <Grid RenderTransformOrigin="0,1" >
        <Border Padding="10 0 10 0"  BorderBrush="DarkGray" CornerRadius="7">
            <Border.Style>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="Background" Value="DarkGreen"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ToastMessage.ToastType}" Value="{x:Static toasttype:ToastType.Success}">
                            <Setter Property="Background" Value="DarkGreen"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ToastMessage.ToastType}" Value="{x:Static toasttype:ToastType.Error}">
                            <Setter Property="Background" Value="Red"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ToastMessage.ToastType}" Value="{x:Static toasttype:ToastType.Info}">
                            <Setter Property="Background" Value="Blue"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ToastMessage.ToastType}" Value="{x:Static toasttype:ToastType.Warning}">
                            <Setter Property="Background" Value="Yellow"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <TextBlock Grid.Column="0"
                       Grid.Row="0"
                       VerticalAlignment="Center"
                       HorizontalAlignment="Center"
                           TextAlignment="Center"
                       FontWeight="Bold" FontSize="15"
                       Foreground="White"
                       TextWrapping="Wrap" 
                       Text="{Binding ToastMessage.Message}">

                </TextBlock>


                <Border Grid.Column="1" Grid.Row="0" CornerRadius="40"
                        Width="40"
                        Height="40"
                        Margin="10"
                        Padding="4"
                        Background="White">
                    <fa:ImageAwesome  Foreground="Black"
                         Height="20" Margin="0 0 0 0"
                         >
                        <fa:ImageAwesome.Style>
                            <Style TargetType="{x:Type fa:ImageAwesome}">
                                <Setter Property="Icon" Value="Check"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ToastMessage.ToastType}" Value="{x:Static toasttype:ToastType.Success}">
                                        <Setter Property="Icon" Value="Check"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ToastMessage.ToastType}" Value="{x:Static toasttype:ToastType.Error}">
                                        <Setter Property="Icon" Value="Close"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ToastMessage.ToastType}" Value="{x:Static toasttype:ToastType.Info}">
                                        <Setter Property="Icon" Value="Info"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ToastMessage.ToastType}" Value="{x:Static toasttype:ToastType.Warning}">
                                        <Setter Property="Icon" Value="Exclamation"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </fa:ImageAwesome.Style>
                    </fa:ImageAwesome>
                </Border>
            </Grid>
        </Border>

        <!-- Animation -->
        <Grid.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <BeginStoryboard x:Name="StoryboardLoad">
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" From="0.0" To="1.0" Duration="0:0:2" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" From="1.0" To="0.0" Duration="0:0:3" BeginTime="0:0:1" Completed="DoubleAnimationCompleted"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>

            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <EventTrigger.Actions>
                    <RemoveStoryboard BeginStoryboardName="StoryboardLoad"/>
                    <RemoveStoryboard BeginStoryboardName="StoryboardFade"/>
                </EventTrigger.Actions>
            </EventTrigger>

            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard x:Name="StoryboardFade">
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" From="1.0" To="0.0" Duration="0:0:3" BeginTime="0:0:1" Completed="DoubleAnimationCompleted"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>

        </Grid.Triggers>

        <Grid.RenderTransform>
            <ScaleTransform ScaleY="1" />
        </Grid.RenderTransform>
    </Grid>
</Window>
